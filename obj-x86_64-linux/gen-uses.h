// DO NOT EDIT - this file is automatically generated by GenOpcodes
//
#ifndef GEN_USES_MAODEFS_H_
#define GEN_USES_MAODEFS_H_
#define BNULL BitString(256, 4, 0x0ull, 0x0ull, 0x0ull, 0x0ull)
#define BALL  BitString(256, 4, -1ull, -1ull, -1ull, -1ull)
UseEntry use_entries [] = {
  { OP_invalid, 0, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_aaa, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x2ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_aad, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x2000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_aam, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x2000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_aas, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x2ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_adc, 0 | USE_OP_ALL, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_add, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_addpd, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_addps, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_addr16, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_addr32, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_addsd, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_addss, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_addsubpd, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_addsubps, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_adword, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_aesdec, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_aesdeclast, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_aesenc, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_aesenclast, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_aesimc, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_aeskeygenassist, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_and, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_andn, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_andnpd, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_andnps, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_andpd, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_andps, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_arpl, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_aword, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_bextr, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_blcfill, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_blci, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_blcic, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_blcmsk, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_blcs, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_blendpd, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_blendps, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_blendvpd, 0 | USE_OP_ALL, BitString(256, 4, 0x0ULL, 0x0ULL, 0x10000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_blendvps, 0 | USE_OP_ALL, BitString(256, 4, 0x0ULL, 0x0ULL, 0x10000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_blsfill, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_blsi, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_blsic, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_blsmsk, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_blsr, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_bound, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_bsf, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_bsr, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_bswap, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_bt, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_btc, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_btr, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_bts, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_bzhi, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_call, 0 | USE_OP_ALL, BitString(256, 4, 0xee00000000000000ULL, 0x407ULL, 0x1000000ff0000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_cbtw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_cbw, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x2ULL, 0x0ULL, 0x0ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_cdq, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x20000000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_cdqe, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x20000000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_clc, 0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_cld, 0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_clflush, 0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_clgi, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_cli, 0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_clr, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_cltd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_cltq, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x20000000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_clts, 0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_cmc, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_cmova, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_cmovae, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_cmovb, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_cmovbe, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_cmovc, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_cmove, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_cmovg, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_cmovge, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_cmovl, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_cmovle, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_cmovna, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_cmovnae, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_cmovnb, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_cmovnbe, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_cmovnc, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_cmovne, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_cmovng, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_cmovnge, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_cmovnl, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_cmovnle, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_cmovno, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_cmovnp, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_cmovns, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_cmovnz, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_cmovo, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_cmovp, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_cmovpe, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_cmovpo, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_cmovs, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_cmovz, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_cmp, 0 | REG_OP0 | REG_OP1 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_cmpeqpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_cmpeqps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_cmpeqsd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_cmpeqss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_cmplepd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_cmpleps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_cmplesd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_cmpless, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_cmpltpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_cmpltps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_cmpltsd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_cmpltss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_cmpneqpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_cmpneqps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_cmpneqsd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_cmpneqss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_cmpnlepd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_cmpnleps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_cmpnlesd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_cmpnless, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_cmpnltpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_cmpnltps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_cmpnltsd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_cmpnltss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_cmpordpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_cmpordps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_cmpordsd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_cmpordss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_cmppd, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_cmpps, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_cmps, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x8001800180000000ULL, 0x1201ULL, 0x0ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_cmpsd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_cmpss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_cmpunordpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_cmpunordps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_cmpunordsd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_cmpunordss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_cmpxchg16b, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x1e00000000000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_cmpxchg, 0 | USE_OP_ALL, BitString(256, 4, 0x200000000000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_cmpxchg8b, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x1e0000000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_comisd, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_comiss, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_cpuid, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x60000000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_cqo, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x200000000000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_cqto, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_crc32, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_cs, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_cvtdq2pd, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_cvtdq2ps, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_cvtpd2dq, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_cvtpd2pi, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_cvtpd2ps, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_cvtpi2pd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_cvtpi2ps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_cvtps2dq, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_cvtps2pd, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_cvtps2pi, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_cvtsd2si, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_cvtsd2ss, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_cvtsi2sd, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_cvtsi2ss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_cvtss2sd, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_cvtss2si, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_cvttpd2dq, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_cvttpd2pi, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_cvttps2dq, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_cvttps2pi, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_cvttsd2si, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_cvttss2si, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_cwd, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x2000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_cwde, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x2000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_cwtd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_cwtl, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_daa, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x2ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_das, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x2ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_data16, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_data32, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_dec, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_div, 0 | USE_OP_ALL, BNULL, BitString(256, 4, 0x2000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BitString(256, 4, 0xa000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BitString(256, 4, 0xa0000000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BitString(256, 4, 0xa00000000000000ULL, 0x0ULL, 0x0ULL, 0x0ULL) },
  { OP_divpd, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_divps, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_divsd, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_divss, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_dppd, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_dpps, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_ds, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_dword, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_emms, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_enter, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x6000000000000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_es, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_extractps, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_extrq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_f2xm1, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fabs, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fadd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_faddp, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fbld, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fbstp, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fchs, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fclex, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fcmova, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fcmovae, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fcmovb, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fcmovbe, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fcmove, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fcmovna, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fcmovnae, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fcmovnb, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fcmovnbe, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fcmovne, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fcmovnu, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fcmovu, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fcom, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fcomi, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fcomip, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fcomp, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fcompi, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fcompp, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fcos, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fdecstp, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fdisi, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fdiv, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fdivp, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fdivr, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fdivrp, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_femms, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_feni, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_ffree, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_ffreep, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fiadd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_ficom, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_ficomp, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fidiv, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fidivr, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fild, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fildll, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fimul, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fincstp, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_finit, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fist, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fistp, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fistpll, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fisttp, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fisttpll, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fisub, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fisubr, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fld1, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fld, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fldcw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fldenv, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fldl2e, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fldl2t, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fldlg2, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fldln2, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fldpi, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fldt, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fldz, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fmul, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fmulp, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fnclex, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fndisi, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fneni, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fninit, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fnop, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fnsave, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fnsetpm, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fnstcw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fnstenv, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fnstsw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fpatan, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fprem, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fprem1, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fptan, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_frndint, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_frstor, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_frstpm, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fs, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fsave, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fscale, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fsetpm, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fsin, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fsincos, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fsqrt, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fst, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fstcw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fstenv, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fstp, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fstpt, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fstsw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fsub, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fsubp, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fsubr, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fsubrp, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_ftst, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fucom, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fucomi, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fucomip, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fucomp, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fucompi, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fucompp, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fwait, 0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_fxam, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fxch, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fxrstor, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fxrstor64, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fxsave, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fxsave64, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fxtract, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fyl2x, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_fyl2xp1, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_getsec, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_gs, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_haddpd, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_haddps, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_hlt, 0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_hnt, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_hsubpd, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_hsubps, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_ht, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_idiv, 0 | USE_OP_ALL, BNULL, BitString(256, 4, 0x2000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BitString(256, 4, 0xa000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BitString(256, 4, 0xa0000000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BitString(256, 4, 0xa00000000000000ULL, 0x0ULL, 0x0ULL, 0x0ULL) },
  { OP_imul, 0 | USE_OP_ALL, BNULL, BitString(256, 4, 0x2000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BitString(256, 4, 0x2000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BitString(256, 4, 0x20000000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BitString(256, 4, 0x200000000000000ULL, 0x0ULL, 0x0ULL, 0x0ULL) },
  { OP_in, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x8000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_inc, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_ins, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x8000000ULL, 0x1ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_insertps, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_insertq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_int, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_int3, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_into, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_invd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_invept, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_invlpg, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_invlpga, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_invpcid, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_invvpid, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_iret, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_ja, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_jae, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_jb, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_jbe, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_jc, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_jcxz, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x4000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_je, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_jecxz, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x40000000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_jg, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_jge, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_jl, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_jle, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_jmp, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_jna, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_jnae, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_jnb, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_jnbe, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_jnc, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_jne, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_jng, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_jnge, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_jnl, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_jnle, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_jno, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_jnp, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_jns, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_jnz, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_jo, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_jp, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_jpe, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_jpo, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_jrcxz, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x400000000000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_js, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_jz, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_lahf, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_lar, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_lcall, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_lddqu, 0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_ldmxcsr, 0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_lds, 0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_lea, 0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_leave, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x6000000000000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_les, 0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_lfence, 0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_lfs, 0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_lgdt, 0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_lgs, 0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_lidt, 0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_ljmp, 0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_lldt, 0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_llwpcb, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_lmsw, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_lock, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_lods, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x1000ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BitString(256, 4, 0x80000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BitString(256, 4, 0x800000000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BitString(256, 4, 0x8000000000000000ULL, 0x0ULL, 0x0ULL, 0x0ULL) },
  { OP_loop, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x400000000000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_loope, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x400000000000000ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_loopne, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x400000000000000ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_loopnz, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x400000000000000ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_loopz, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x400000000000000ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_lret, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_lsl, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_lss, 0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_ltr, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_lwpins, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_lwpval, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_lzcnt, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_maskmovdqu, 0 | USE_OP_ALL, BitString(256, 4, 0x1000000000000ULL, 0x1000ULL, 0x0ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_maskmovq, 0 | USE_OP_ALL, BitString(256, 4, 0x1000000000000ULL, 0x1000ULL, 0x0ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_maxpd, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_maxps, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_maxsd, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_maxss, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_mfence, 0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_minpd, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_minps, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_minsd, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_minss, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_monitor, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x200000000000000ULL, 0x1000ULL, 0x0ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_montmul, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_mov, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_movabs, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_movapd, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_movaps, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_movbe, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_movd, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_movddup, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_movdq2q, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_movdqa, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_movdqu, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_movhlps, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_movhpd, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_movhps, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_movlhps, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_movlpd, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_movlps, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_movmskpd, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_movmskps, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_movntdq, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_movntdqa, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_movnti, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_movntpd, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_movntps, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_movntq, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_movntsd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_movntss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_movq, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_movq2dq, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_movs, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x40000000000ULL, 0x1200ULL, 0x0ULL, 0x0ULL), BitString(256, 4, 0x180000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BitString(256, 4, 0x180000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BitString(256, 4, 0x1800000000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BitString(256, 4, 0x8000000000000000ULL, 0x1ULL, 0x0ULL, 0x0ULL) },
  { OP_movsbl, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_movsbq, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_movsbw, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_movsd, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_movshdup, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_movsldup, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_movslq, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_movss, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_movswl, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_movswq, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_movsx, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_movsxd, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_movupd, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_movups, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_movzb, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_movzbl, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_movzbq, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_movzbw, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_movzwl, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_movzwq, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_movzx, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_mpsadbw, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_mul, 0 | USE_OP_ALL, BNULL, BitString(256, 4, 0x2ULL, 0x0ULL, 0x0ULL, 0x0ULL), BitString(256, 4, 0x2000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BitString(256, 4, 0x20000000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BitString(256, 4, 0x200000000000000ULL, 0x0ULL, 0x0ULL, 0x0ULL) },
  { OP_mulpd, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_mulps, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_mulsd, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_mulss, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_mulx, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_mwait, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x60000000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_neg, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_nop, 0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_not, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_or, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_orpd, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_orps, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_out, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x20008000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_outs, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x8000000ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BitString(256, 4, 0x80000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BitString(256, 4, 0x80000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BitString(256, 4, 0x800000000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BitString(256, 4, 0x8000000000000000ULL, 0x0ULL, 0x0ULL, 0x0ULL) },
  { OP_pabsb, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pabsd, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pabsw, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_packssdw, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_packsswb, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_packusdw, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_packuswb, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_paddb, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_paddd, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_paddq, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_paddsb, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_paddsw, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_paddusb, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_paddusw, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_paddw, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_palignr, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pand, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pandn, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pause, 0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pavgb, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pavgusb, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_pavgw, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pblendvb, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pblendw, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pclmulhqhqdq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_pclmulhqlqdq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_pclmullqhqdq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_pclmullqlqdq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_pclmulqdq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_pcmpeqb, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pcmpeqd, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pcmpeqq, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pcmpeqw, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pcmpestri, 0 | USE_OP_ALL, BitString(256, 4, 0xa000a0000000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_pcmpestrm, 0 | USE_OP_ALL, BitString(256, 4, 0xa000a0000000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_pcmpgtb, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pcmpgtd, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pcmpgtq, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pcmpgtw, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pcmpistri, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pcmpistrm, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pdep, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_pext, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_pextrb, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pextrd, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pextrq, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pextrw, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pf2id, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_pf2iw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_pfacc, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_pfadd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_pfcmpeq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_pfcmpge, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_pfcmpgt, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_pfmax, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_pfmin, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_pfmul, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_pfnacc, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_pfpnacc, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_pfrcp, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_pfrcpit1, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_pfrcpit2, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_pfrsqit1, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_pfrsqrt, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_pfsub, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_pfsubr, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_phaddd, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_phaddsw, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_phaddw, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_phminposuw, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_phsubd, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_phsubsw, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_phsubw, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pi2fd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_pi2fw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_pinsrb, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pinsrd, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pinsrq, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pinsrw, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pmaddubsw, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pmaddwd, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pmaxsb, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pmaxsd, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pmaxsw, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pmaxub, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pmaxud, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pmaxuw, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pminsb, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pminsd, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pminsw, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pminub, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pminud, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pminuw, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pmovmskb, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pmovsxbd, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pmovsxbq, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pmovsxbw, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pmovsxdq, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pmovsxwd, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pmovsxwq, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pmovzxbd, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pmovzxbq, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pmovzxbw, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pmovzxdq, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pmovzxwd, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pmovzxwq, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pmuldq, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pmulhrsw, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pmulhrw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_pmulhuw, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pmulhw, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pmulld, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pmullw, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pmuludq, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pop, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x2000000000000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_popa, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x2000000000000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_popcnt, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_popf, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x2000000000000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_por, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_prefetch, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_prefetchnta, 0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_prefetcht0, 0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_prefetcht1, 0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_prefetcht2, 0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_prefetchw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_psadbw, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pshufb, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pshufd, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pshufhw, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pshuflw, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pshufw, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_psignb, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_psignd, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_psignw, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pslld, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pslldq, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_psllq, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_psllw, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_psrad, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_psraw, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_psrld, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_psrldq, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_psrlq, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_psrlw, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_psubb, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_psubd, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_psubq, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_psubsb, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_psubsw, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_psubusb, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_psubusw, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_psubw, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_pswapd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_ptest, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_punpckhbw, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_punpckhdq, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_punpckhqdq, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_punpckhwd, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_punpcklbw, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_punpckldq, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_punpcklqdq, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_punpcklwd, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_push, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x2000000000000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_pusha, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x2001de0000000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_pushf, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x2000000000000000ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_pxor, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_rcl, 0 | USE_OP_ALL, BitString(256, 4, 0x4ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_rcpps, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_rcpss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_rcr, 0 | USE_OP_ALL, BitString(256, 4, 0x4ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_rdfsbase, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_rdgsbase, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_rdmsr, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x40000000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_rdpmc, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x40000000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_rdrand, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_rdtsc, 0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_rdtscp, 0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_rep, 0 | USE_OP_ALL, BitString(256, 4, 0x860186018e000000ULL, 0x1201ULL, 0x0ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_repe, 0 | USE_OP_ALL, BitString(256, 4, 0x8601860186000000ULL, 0x1201ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_repne, 0 | USE_OP_ALL, BitString(256, 4, 0x8601860186000000ULL, 0x1201ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_repnz, 0 | USE_OP_ALL, BitString(256, 4, 0x8601860186000000ULL, 0x1201ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_repz, 0 | USE_OP_ALL, BitString(256, 4, 0x8601860186000000ULL, 0x1201ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_ret, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x2000000000000000ULL, 0x0ULL, 0x1000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_retf, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_rex, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_rex64, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_rex64x, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_rex64xy, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_rex64xyz, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_rex64xz, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_rex64y, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_rex64yz, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_rex64z, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_rex_b, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_rex_r, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_rex_rb, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_rex_rx, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_rex_rxb, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_rex_w, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_rex_wb, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_rex_wr, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_rex_wrb, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_rex_wrx, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_rex_wrxb, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_rex_wx, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_rex_wxb, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_rex_x, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_rexx, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_rex_xb, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_rexxy, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_rexxyz, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_rexxz, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_rexy, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_rexyz, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_rexz, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_rol, 0 | USE_OP_ALL, BitString(256, 4, 0x4ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_ror, 0 | USE_OP_ALL, BitString(256, 4, 0x4ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_rorx, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_roundpd, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_roundps, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_roundsd, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_roundss, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_rsm, 0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_rsqrtps, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_rsqrtss, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_sahf, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x20ULL, 0x0ULL, 0x0ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_sal, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_sar, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_sarx, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_sbb, 0 | USE_OP_ALL, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_scas, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x200000000000000ULL, 0x201ULL, 0x0ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_scmp, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_seta, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_setae, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_setb, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_setbe, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_setc, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_sete, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_setg, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_setge, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_setl, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_setle, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_setna, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_setnae, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_setnb, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_setnbe, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_setnc, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_setne, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_setng, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_setnge, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_setnl, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_setnle, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_setno, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_setnp, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_setns, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_setnz, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_seto, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_setp, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_setpe, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_setpo, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_sets, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_setz, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_sfence, 0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_sgdt, 0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_shl, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_shld, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_shlx, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_shr, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_shrd, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_shrx, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_shufpd, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_shufps, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_sidt, 0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_skinit, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_sldt, 0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_slod, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_slwpcb, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_smov, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_smsw, 0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_sqrtpd, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_sqrtps, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_sqrtsd, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_sqrtss, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_ss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_ssca, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_ssto, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_stc, 0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_std, 0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_stgi, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_sti, 0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_stmxcsr, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0x0ULL, 0x1000ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_stos, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x200000000000000ULL, 0x0ULL, 0x1000000000000000ULL, 0x0ULL), BitString(256, 4, 0x100000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BitString(256, 4, 0x100000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BitString(256, 4, 0x1000000000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BitString(256, 4, 0x0ULL, 0x1ULL, 0x0ULL, 0x0ULL) },
  { OP_str, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x0ULL, 0x0ULL, 0xffULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_sub, 0 | USE_OP_ALL, BNULL, BitString(256, 4, 0x2ULL, 0x0ULL, 0x0ULL, 0x0ULL), BitString(256, 4, 0x2000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BitString(256, 4, 0x20000000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BitString(256, 4, 0x200000000000000ULL, 0x0ULL, 0x0ULL, 0x0ULL) },
  { OP_subpd, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_subps, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_subsd, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_subss, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_swapgs, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_syscall, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_sysenter, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_sysexit, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_sysret, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_t1mskc, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_test, 0 | USE_OP_ALL, BNULL, BitString(256, 4, 0x2ULL, 0x0ULL, 0x0ULL, 0x0ULL), BitString(256, 4, 0x2000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BitString(256, 4, 0x20000000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BitString(256, 4, 0x200000000000000ULL, 0x0ULL, 0x0ULL, 0x0ULL) },
  { OP_tzcnt, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_tzmsk, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_ucomisd, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_ucomiss, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_ud1, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_ud2, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_ud2a, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_ud2b, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_unpckhpd, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_unpckhps, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_unpcklpd, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_unpcklps, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_vaddpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vaddps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vaddsd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vaddss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vaddsubpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vaddsubps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vaesdec, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vaesdeclast, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vaesenc, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vaesenclast, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vaesimc, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vaeskeygenassist, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vandnpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vandnps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vandpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vandps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vblendpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vblendps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vblendvpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vblendvps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vbroadcastf128, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vbroadcasti128, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vbroadcastsd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vbroadcastss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpeq_ospd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpeq_osps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpeq_ossd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpeq_osss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpeqpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpeqps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpeqsd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpeqss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpeq_uqpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpeq_uqps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpeq_uqsd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpeq_uqss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpeq_uspd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpeq_usps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpeq_ussd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpeq_usss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpfalse_ospd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpfalse_osps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpfalse_ossd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpfalse_osss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpfalsepd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpfalseps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpfalsesd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpfalsess, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpge_oqpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpge_oqps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpge_oqsd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpge_oqss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpgepd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpgeps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpgesd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpgess, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpgt_oqpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpgt_oqps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpgt_oqsd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpgt_oqss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpgtpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpgtps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpgtsd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpgtss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmple_oqpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmple_oqps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmple_oqsd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmple_oqss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmplepd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpleps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmplesd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpless, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmplt_oqpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmplt_oqps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmplt_oqsd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmplt_oqss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpltpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpltps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpltsd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpltss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpneq_oqpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpneq_oqps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpneq_oqsd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpneq_oqss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpneq_ospd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpneq_osps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpneq_ossd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpneq_osss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpneqpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpneqps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpneqsd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpneqss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpneq_uspd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpneq_usps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpneq_ussd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpneq_usss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpngepd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpngeps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpngesd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpngess, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpnge_uqpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpnge_uqps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpnge_uqsd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpnge_uqss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpngtpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpngtps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpngtsd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpngtss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpngt_uqpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpngt_uqps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpngt_uqsd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpngt_uqss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpnlepd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpnleps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpnlesd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpnless, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpnle_uqpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpnle_uqps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpnle_uqsd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpnle_uqss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpnltpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpnltps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpnltsd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpnltss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpnlt_uqpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpnlt_uqps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpnlt_uqsd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpnlt_uqss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpordpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpordps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpordsd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpord_spd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpord_sps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpordss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpord_ssd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpord_sss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmppd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpsd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmptruepd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmptrueps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmptruesd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmptruess, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmptrue_uspd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmptrue_usps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmptrue_ussd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmptrue_usss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpunordpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpunordps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpunordsd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpunord_spd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpunord_sps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpunordss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpunord_ssd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcmpunord_sss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcomisd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcomiss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcvtdq2pd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcvtdq2ps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcvtpd2dq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcvtpd2dqx, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcvtpd2dqy, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcvtpd2ps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcvtpd2psx, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcvtpd2psy, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcvtph2ps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcvtps2dq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcvtps2pd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcvtps2ph, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcvtsd2si, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcvtsd2ss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcvtsi2sd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcvtsi2ss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcvtss2sd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcvtss2si, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcvttpd2dq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcvttpd2dqx, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcvttpd2dqy, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcvttps2dq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcvttsd2si, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vcvttss2si, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vdivpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vdivps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vdivsd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vdivss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vdppd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vdpps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_verr, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_verw, 0 | REG_OP0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_vextractf128, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vextracti128, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vextractps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfmadd132pd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfmadd132ps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfmadd132sd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfmadd132ss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfmadd213pd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfmadd213ps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfmadd213sd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfmadd213ss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfmadd231pd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfmadd231ps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfmadd231sd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfmadd231ss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfmaddpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfmaddps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfmaddsd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfmaddss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfmaddsub132pd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfmaddsub132ps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfmaddsub213pd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfmaddsub213ps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfmaddsub231pd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfmaddsub231ps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfmaddsubpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfmaddsubps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfmsub132pd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfmsub132ps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfmsub132sd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfmsub132ss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfmsub213pd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfmsub213ps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfmsub213sd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfmsub213ss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfmsub231pd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfmsub231ps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfmsub231sd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfmsub231ss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfmsubadd132pd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfmsubadd132ps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfmsubadd213pd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfmsubadd213ps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfmsubadd231pd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfmsubadd231ps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfmsubaddpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfmsubaddps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfmsubpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfmsubps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfmsubsd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfmsubss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfnmadd132pd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfnmadd132ps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfnmadd132sd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfnmadd132ss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfnmadd213pd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfnmadd213ps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfnmadd213sd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfnmadd213ss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfnmadd231pd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfnmadd231ps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfnmadd231sd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfnmadd231ss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfnmaddpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfnmaddps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfnmaddsd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfnmaddss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfnmsub132pd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfnmsub132ps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfnmsub132sd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfnmsub132ss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfnmsub213pd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfnmsub213ps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfnmsub213sd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfnmsub213ss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfnmsub231pd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfnmsub231ps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfnmsub231sd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfnmsub231ss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfnmsubpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfnmsubps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfnmsubsd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfnmsubss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfrczpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfrczps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfrczsd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vfrczss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vgatherdpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vgatherdps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vgatherqpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vgatherqps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vhaddpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vhaddps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vhsubpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vhsubps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vinsertf128, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vinserti128, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vinsertps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vlddqu, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vldmxcsr, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vmaskmovdqu, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vmaskmovpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vmaskmovps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vmaxpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vmaxps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vmaxsd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vmaxss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vmcall, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vmclear, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vminpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vminps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vminsd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vminss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vmlaunch, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vmload, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vmmcall, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vmovapd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vmovaps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vmovd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vmovddup, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vmovdqa, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vmovdqu, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vmovhlps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vmovhpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vmovhps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vmovlhps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vmovlpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vmovlps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vmovmskpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vmovmskps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vmovntdq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vmovntdqa, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vmovntpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vmovntps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vmovq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vmovsd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vmovshdup, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vmovsldup, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vmovss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vmovupd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vmovups, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vmpsadbw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vmptrld, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vmptrst, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vmread, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vmresume, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vmrun, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vmsave, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vmulpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vmulps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vmulsd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vmulss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vmwrite, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vmxoff, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vmxon, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vorpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vorps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpabsb, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpabsd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpabsw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpackssdw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpacksswb, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpackusdw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpackuswb, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpaddb, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpaddd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpaddq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpaddsb, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpaddsw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpaddusb, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpaddusw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpaddw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpalignr, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpand, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpandn, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpavgb, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpavgw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpblendd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpblendvb, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpblendw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpbroadcastb, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpbroadcastd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpbroadcastq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpbroadcastw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpclmulhqhqdq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpclmulhqlqdq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpclmullqhqdq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpclmullqlqdq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpclmulqdq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcmov, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcmpeqb, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcmpeqd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcmpeqq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcmpeqw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcmpestri, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcmpestrm, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcmpgtb, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcmpgtd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcmpgtq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcmpgtw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcmpistri, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcmpistrm, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomb, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomeqb, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomeqd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomeqq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomequb, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomequd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomequq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomequw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomeqw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomfalseb, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomfalsed, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomfalseq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomfalseub, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomfalseud, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomfalseuq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomfalseuw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomfalsew, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomgeb, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomged, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomgeq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomgeub, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomgeud, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomgeuq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomgeuw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomgew, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomgtb, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomgtd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomgtq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomgtub, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomgtud, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomgtuq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomgtuw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomgtw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomleb, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomled, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomleq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomleub, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomleud, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomleuq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomleuw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomlew, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomltb, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomltd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomltq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomltub, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomltud, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomltuq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomltuw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomltw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomneqb, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomneqd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomneqq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomnequb, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomnequd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomnequq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomnequw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomneqw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomtrueb, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomtrued, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomtrueq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomtrueub, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomtrueud, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomtrueuq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomtrueuw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomtruew, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomub, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomud, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomuq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomuw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpcomw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vperm2f128, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vperm2i128, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpermd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpermil2pd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpermil2ps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpermilpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpermilps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpermpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpermps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpermq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpextrb, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpextrd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpextrq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpextrw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpgatherdd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpgatherdq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpgatherqd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpgatherqq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vphaddbd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vphaddbq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vphaddbw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vphaddd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vphadddq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vphaddsw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vphaddubd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vphaddubq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vphaddubw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vphaddudq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vphadduwd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vphadduwq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vphaddw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vphaddwd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vphaddwq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vphminposuw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vphsubbw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vphsubd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vphsubdq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vphsubsw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vphsubw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vphsubwd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpinsrb, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpinsrd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpinsrq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpinsrw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpmacsdd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpmacsdqh, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpmacsdql, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpmacssdd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpmacssdqh, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpmacssdql, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpmacsswd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpmacssww, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpmacswd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpmacsww, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpmadcsswd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpmadcswd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpmaddubsw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpmaddwd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpmaskmovd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpmaskmovq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpmaxsb, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpmaxsd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpmaxsw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpmaxub, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpmaxud, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpmaxuw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpminsb, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpminsd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpminsw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpminub, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpminud, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpminuw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpmovmskb, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpmovsxbd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpmovsxbq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpmovsxbw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpmovsxdq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpmovsxwd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpmovsxwq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpmovzxbd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpmovzxbq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpmovzxbw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpmovzxdq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpmovzxwd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpmovzxwq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpmuldq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpmulhrsw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpmulhuw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpmulhw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpmulld, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpmullw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpmuludq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpor, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpperm, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vprotb, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vprotd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vprotq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vprotw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpsadbw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpshab, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpshad, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpshaq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpshaw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpshlb, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpshld, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpshlq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpshlw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpshufb, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpshufd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpshufhw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpshuflw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpsignb, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpsignd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpsignw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpslld, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpslldq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpsllq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpsllvd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpsllvq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpsllw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpsrad, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpsravd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpsraw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpsrld, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpsrldq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpsrlq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpsrlvd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpsrlvq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpsrlw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpsubb, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpsubd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpsubq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpsubsb, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpsubsw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpsubusb, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpsubusw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpsubw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vptest, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpunpckhbw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpunpckhdq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpunpckhqdq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpunpckhwd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpunpcklbw, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpunpckldq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpunpcklqdq, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpunpcklwd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vpxor, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vrcpps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vrcpss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vroundpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vroundps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vroundsd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vroundss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vrsqrtps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vrsqrtss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vshufpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vshufps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vsqrtpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vsqrtps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vsqrtsd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vsqrtss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vstmxcsr, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vsubpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vsubps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vsubsd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vsubss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vtestpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vtestps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vucomisd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vucomiss, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vunpckhpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vunpckhps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vunpcklpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vunpcklps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vxorpd, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vxorps, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vzeroall, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_vzeroupper, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_wait, 0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_wbinvd, 0 | REG_OP_BASE | REG_OP_INDEX, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_word, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_wrfsbase, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_wrgsbase, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_wrmsr, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0xe0000000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_xadd, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_xchg, 0 | USE_OP_ALL, BNULL, BitString(256, 4, 0x2000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BitString(256, 4, 0x2000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BitString(256, 4, 0x20000000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BitString(256, 4, 0x200000000000000ULL, 0x0ULL, 0x0ULL, 0x0ULL) },
  { OP_xcrypt_cbc, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_xcryptcbc, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_xcrypt_cfb, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_xcryptcfb, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_xcrypt_ctr, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_xcryptctr, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_xcrypt_ecb, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_xcryptecb, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_xcrypt_ofb, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_xcryptofb, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_xgetbv, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x40000000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_xlat, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0x1000000000000002ULL, 0x1000ULL, 0x0ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_xor, 0 | USE_OP_ALL, BNULL, BitString(256, 4, 0x2ULL, 0x0ULL, 0x0ULL, 0x0ULL), BitString(256, 4, 0x2000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BitString(256, 4, 0x20000000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BitString(256, 4, 0x200000000000000ULL, 0x0ULL, 0x0ULL, 0x0ULL) },
  { OP_xorpd, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_xorps, 0 | USE_OP_ALL, BNULL, BNULL, BNULL, BNULL, BNULL },
  { OP_xrstor, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0xa0000000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_xrstor64, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_xsave, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_xsave64, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_xsaveopt, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_xsaveopt64, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_xsetbv, 0 | REG_OP_BASE | REG_OP_INDEX, BitString(256, 4, 0xe0000000000ULL, 0x0ULL, 0x0ULL, 0x0ULL), BNULL, BNULL, BNULL, BNULL },
  { OP_xsha1, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_xsha256, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_xstore, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_xstore_rng, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
  { OP_xstorerng, USE_OP_ALL, BALL, BALL, BALL, BALL, BALL },
};
const unsigned int use_entries_size = sizeof(use_entries) / sizeof(UseEntry);
#endif  // GEN_USES_MAODEFS_H_
