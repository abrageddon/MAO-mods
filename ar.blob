#!/usr/bin/python
import sys, os, re, string, subprocess, shutil, random, getpass, pickle, time


prDebug = True
extraFlags = ['-time', '-ftime-report'] 

retCode = 0

clangExec = "clang"

def main():
    global timeTest
    timeTest = time.time()

    global cmdLine
    cmdLine = ' ' + string.join(sys.argv[1:],' ') + ' '

    initVars(sys.argv[1:])

    linkAndCacheAssemblyBlob(cachedFile+'.blob.s')
    annotate(cachedFile+".blob.a.s", cachedFile+'.blob.s')
    diversify(cachedFile+".blob.div.s", cachedFile+".blob.a.s")
    buildObjFromASM(cachedFile+'.o', cachedFile+".blob.div.s")

    if prDebug: sys.stderr.write ("=== AR ===" +'\n\n')
    #execAR = 'ar.real'
    execAR = 'ar.gold'
#    runAR = [execAR] + sys.argv[1:]
    runAR = [execAR] + [args] + [destFile] + [cachedFile+'.o'] + inSrc
    if prDebug: sys.stderr.write (string.join(runAR,' ')+'\n\n')
    execBuild(runAR, "Run AR")

    if prDebug: sys.stderr.write( "AR RUNTIME: "+ str(time.time() - timeTest) +'\n')
    if prDebug: sys.stderr.write( "\n" )
    sys.exit(retCode)
    #sys.stderr.write ( os.getenv("CC", "NONE") + "\n")
    #sys.stderr.write ( os.getenv("CXX", "NONE") + "\n")
    #sys.stderr.write ( os.getenv("CFLAGS", "NONE") + "\n")
    #sys.stderr.write ( os.getenv("CXXFLAGS", "NONE") + "\n")
    





def execBuild(cmd, mesg):
    global retCode
    if cmd[0] == clangExec or cmd[0] == gccExec:
        cmd += extraFlags
    process = subprocess.Popen(cmd)
    retCode = process.wait()
    return errorCatch(retCode, string.join(cmd,' '), mesg)

def errorCatch(retCode, cmd, mesg):
    if (retCode != 0):
        sys.stderr.write ('========= Error: '+ mesg +' failed\n'+cmd+'\n\n')
        sys.stderr.write( 'os.getcwd(): '+ os.getcwd() +'\n\n')
        sys.stderr.write( 'cmdLine: ' + str(cmdLine) +'\n\n')

        sys.stderr.write( 'args: ' + str(args) +'\n')
        sys.stderr.write( 'destFile: ' + str(destFile) +'\n')
        sys.stderr.write( 'objects: ' + str(objects) +'\n\n')
        sys.stderr.write ('isAsm: '+string.join(str(isAsm),' ')+'\n\n')
        sys.stderr.write ('assemblyGenFlags: '+string.join(assemblyGenFlags,' ')+'\n\n')
        sys.stderr.write ('buildFlags: '+string.join(buildFlags,' ')+'\n\n')
        sys.exit(retCode)
    return retCode

def readLineFlags(filename):
    #global flags
    flags=None
    with open(filename, 'rb') as inFile:
        flags = pickle.load(inFile)
    return flags
    sys.stderr.write (flags)

def linkAndCacheAssemblyBlob(output):
    global retCode
    if not os.path.isfile(output):
        if prDebug: sys.stderr.write ("=== Linking Bitcode Files ===" +'\n\n')

        blobBc = output + ".bc"
        llvmLink = ["llvm-link", "-S", "-o", blobBc] + inObj

        if prDebug: sys.stderr.write (string.join(llvmLink,' ')+'\n\n')
        retCode = execBuild(llvmLink, "Linking Bitcode Files") and retCode

        if retCode == 0:
            return cacheAssembly(output, blobBc);
    return retCode

def cacheAssembly(output, inFile=None):
    global retCode
    global Moverride
    if ( os.path.isfile(output) ):
        return retCode

    if prDebug: sys.stderr.write ("=== Cache Assembly ===" +'\n\n')

    if(inFile is None):
        sys.stderr.write ("ERROR in cacheAssembly" )
    else:
        assemble = [clangExec, '-fPIC', "-o", output, "-S", inFile]

    if prDebug: sys.stderr.write (string.join(assemble,' ')+'\n\n')
    return execBuild(assemble, "Cache Assembly")

def annotate(output, inFile):
    if os.path.isfile(output):
        return retCode
    if prDebug: sys.stderr.write ("=== Annotate ===" +'\n\n')

    #TODO read from command line and purge after use
    tests = ""

    #tests += "--plugin=/usr/local/lib/MaoSchedRand-x86_64-linux.so:SCHEDRAND=MultiCompilerSeed["+seed+"]+ISchedRandPercentage["+percent+"]:"
    tests += "--plugin=/usr/local/lib/MaoMOVToLEAAnnotate-x86_64-linux.so:MOVTOLEAA:"
    tests += "--plugin=/usr/local/lib/MaoNOPInsertionAnnotate-x86_64-linux.so:NOPINSERTIONA:"

    annotate = ["mao", "--mao="+tests+"ASM=o["+output+"]", inFile ]

    if prDebug: sys.stderr.write (string.join(annotate,' ')+'\n\n')
    return execBuild(annotate, "Annotate")

def diversify(output, inFile):
    #TODO use output file name
    if prDebug: sys.stderr.write ("=== Diversify ===" +'\n\n')
    diversify = ["divanno", inFile ]

    if prDebug: sys.stderr.write (string.join(diversify,' ')+'\n\n')
    return execBuild(diversify, "Diversify")

def buildObjFromASM(output, inFile):
    if prDebug: sys.stderr.write ("=== ASM To Obj ===" +'\n\n')

    #buildObj = [clangExec, '-o', output, '-c'] + assemblerFlags + [inFile]
    #buildObj = [gccExec, '-o', output, '-c'] + blobCompilerFlags + [inFile]
    buildObj = [gccExec, '-o', output, '-c'] + buildFlags + [inFile]
    #buildObj = [gccExec, '-Wa', '-c', inFile, '-o', output] + assemblerFlags
    #buildObj = [gccExec, '-Wa', inFile, '-o', output] + blobCompilerFlags
    #TODO explore using 'as' further
    #buildObj = ['as', inFile, '-o', output] + assemblerFlags


    #TODO TIME THIS STEP
    if prDebug: sys.stderr.write (string.join(buildObj,' ')+'\n\n')
    return execBuild(buildObj,"ASM To Obj")


def initVars(varList):
    global args
    global destFile
    global objects
    global requiredObjects
    global cachedFile
    global cacheDir
    requiredObjects = []

    args = varList[0]
    destFile = varList[1]
    objects = varList[2:]

    user=getpass.getuser()

    rawFile = os.path.realpath(destFile[:-2])
    cachedFile = re.sub(r'/home/'+user+r'/workspace/','/home/'+user+r'/workspace/bcache/',rawFile)
    cacheDir = os.path.dirname(cachedFile)
    if cacheDir != '':
        if not os.path.isdir(cacheDir) :
            try:
                os.makedirs(cacheDir)
            except:
                pass

    global inObj
    inObj = []
    global inSrc
    inSrc = []
    user = getpass.getuser()
    global assemblyGenFlags
    global buildFlags
    global clangExec
    global gccExec
    global isAsm
    assemblyGenFlags = []
    buildFlags = []

    #For each obj .o located cached .bc file
    for i,item in enumerate(objects):
        source = os.path.realpath(item)
        lineFile = re.sub(r'\.[ol][o]?','.bc',source)
        lineFile = re.sub(r'/home/'+user+r'/workspace/','/home/'+user+r'/workspace/bcache/',lineFile)


        flags = readLineFlags(lineFile[:-2]+'line')
        #TODO DIVIDE BY COMPILER!!!???
        #if prDebug: sys.stderr.write ("File: "+item+" Execs: "+flags[1]+'/'+flags[2]+'\n')
        isAsm = flags[0]
        clangExec = flags[1]
        gccExec = flags[2]
        if (isAsm):
            tempASM = re.sub(r'\.[ol][o]?','.s',source)
            tempSRC = re.sub(r'/home/'+user+r'/workspace/','/home/'+user+r'/workspace/bcache/',tempASM)
            tempOBJ = re.sub(r'/home/'+user+r'/workspace/','/home/'+user+r'/workspace/bcache/',source)
            inSrc += [tempOBJ]
            #TODO BUILD FROM ASM, dont forget to annotate and diversify
            assemblyGenFlags = list(set(assemblyGenFlags))
            buildFlags = list(set(buildFlags))
            annotate(tempSRC+".blob.a.s", tempSRC)
            diversify(tempSRC+".blob.div.s", tempSRC+".blob.a.s")
            buildObjFromASM(tempOBJ, tempSRC+".blob.div.s")
        else:
            assemblyGenFlags += flags[3]
            buildFlags += flags[4]
            tempBC = re.sub(r'\.[ol][o]?','.bc',source)
            tempBCC = re.sub(r'/home/'+user+r'/workspace/','/home/'+user+r'/workspace/bcache/',tempBC)
            inObj += [tempBCC]

    assemblyGenFlags = list(set(assemblyGenFlags))
    buildFlags = list(set(buildFlags))
    
    #if prDebug: sys.stderr.write( 'args: ' + str(args) +'\n')
    #if prDebug: sys.stderr.write( 'destFile: ' + str(destFile) +'\n')
    #if prDebug: sys.stderr.write( 'objects: ' + str(objects) +'\n\n')
    #if prDebug: sys.stderr.write ('assemblyGenFlags: '+string.join(assemblyGenFlags,' ')+'\n')
    #if prDebug: sys.stderr.write ('buildFlags: '+string.join(buildFlags,' ')+'\n\n')



if __name__ == "__main__":
    main()
